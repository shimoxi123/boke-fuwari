---
import { twikooConfig } from "../config";

interface Props {
	class?: string;
}

const { class: className } = Astro.props;

// 如果评论系统未启用，则不渲染
if (!twikooConfig.enable) {
	return null;
}
---

{twikooConfig.enable && (
	<div class:list={["twikoo-container", className]}>
		{twikooConfig.lazyLoad ? (
			<!-- 懒加载模式 -->
			<>
				<!-- 懒加载触发按钮 -->
				<div id="twikoo-trigger" class="twikoo-trigger">
					<button class="load-comments-btn" onclick="loadTwikoo()">
						💬 加载评论
					</button>
					<p class="load-hint">点击加载评论系统</p>
				</div>
				
				<!-- 评论容器 -->
				<div id="tcomment" style="display: none;">
					<div class="loading-placeholder">
						<div class="loading-spinner"></div>
						<p>正在加载评论系统...</p>
					</div>
				</div>
			</>
		) : (
			<!-- 直接加载模式 -->
			<div id="tcomment">
				<div class="loading-placeholder">
					<div class="loading-spinner"></div>
					<p>正在加载评论系统...</p>
				</div>
			</div>
		)}
	</div>
)}

<style>
	.twikoo-container {
		margin-top: 1.5rem;
	}
	
	/* 简洁的懒加载按钮 */
	.twikoo-trigger {
		text-align: center;
		padding: 1.5rem;
		border: 1px solid var(--line-divider);
		border-radius: 8px;
		transition: border-color 0.2s ease;
	}
	
	.twikoo-trigger:hover {
		border-color: var(--primary);
	}
	
	.load-comments-btn {
		display: inline-flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.5rem 1rem;
		background: transparent;
		color: var(--primary);
		border: 1px solid var(--primary);
		border-radius: 6px;
		font-size: 0.9rem;
		cursor: pointer;
		transition: all 0.2s ease;
	}
	
	.load-comments-btn:hover {
		background: var(--primary);
		color: white;
	}
	
	.load-hint {
		margin: 0.5rem 0 0 0;
		font-size: 0.8rem;
		color: var(--content-text-color);
		opacity: 0.6;
	}
	
	/* 简洁的加载状态 */
	.loading-placeholder {
		text-align: center;
		padding: 1.5rem;
		color: var(--content-text-color);
		opacity: 0.7;
	}
	
	.loading-spinner {
		width: 20px;
		height: 20px;
		border: 2px solid var(--line-divider);
		border-top: 2px solid var(--primary);
		border-radius: 50%;
		animation: spin 1s linear infinite;
		margin: 0 auto 0.5rem;
	}
	
	@keyframes spin {
		0% { transform: rotate(0deg); }
		100% { transform: rotate(360deg); }
	}
	
	/* 最简化的 Twikoo 样式 */
	:global(.twikoo) {
		font-family: inherit;
	}
</style>

<!-- 评论系统脚本 -->
<script define:vars={{ twikooConfig }} is:inline>
	// 全局变量存储配置
	window.twikooConfigGlobal = twikooConfig;
	window.twikooLoaded = false;
	window.twikooLoading = false;

	// 懒加载函数 - 用户点击时调用
	window.loadTwikoo = function() {
		if (window.twikooLoading || window.twikooLoaded) return;
		loadTwikooScript();
	};

	// 加载Twikoo脚本
	function loadTwikooScript() {
		window.twikooLoading = true;
		
		// 如果是懒加载模式，隐藏触发按钮，显示评论容器
		if (twikooConfig.lazyLoad) {
			const trigger = document.getElementById('twikoo-trigger');
			const container = document.getElementById('tcomment');
			if (trigger) trigger.style.display = 'none';
			if (container) container.style.display = 'block';
		}
		
		// 加载Twikoo脚本
		const script = document.createElement('script');
		script.src = 'https://cdn.staticfile.org/twikoo/1.6.44/twikoo.min.js';
		script.onload = function() {
			console.log('Twikoo脚本加载成功');
			initTwikoo();
		};
		script.onerror = function() {
			console.warn('主CDN加载失败，尝试备用CDN');
			loadBackupTwikoo();
		};
		document.head.appendChild(script);
	}

	// 备用CDN加载
	function loadBackupTwikoo() {
		const script = document.createElement('script');
		script.src = 'https://unpkg.com/twikoo@1.6.44/dist/twikoo.min.js';
		script.onload = function() {
			console.log('Twikoo备用脚本加载成功');
			initTwikoo();
		};
		script.onerror = function() {
			showError('评论系统加载失败，请检查网络连接');
		};
		document.head.appendChild(script);
	}

	// 初始化Twikoo
	function initTwikoo() {
		if (typeof window.twikoo === 'undefined') {
			showError('Twikoo脚本加载失败');
			return;
		}

		try {
			window.twikoo.init({
				envId: window.twikooConfigGlobal.envId,
				el: '#tcomment',
				path: location.pathname,
				lang: window.twikooConfigGlobal.lang || 'zh-CN'
			}).then(() => {
				console.log('Twikoo初始化成功');
				window.twikooLoaded = true;
				window.twikooLoading = false;
			}).catch(error => {
				console.error('Twikoo初始化失败:', error);
				showError('评论系统初始化失败');
			});
		} catch (error) {
			console.error('Twikoo初始化异常:', error);
			showError('评论系统初始化异常');
		}
	}

	// 显示错误信息
	function showError(message) {
		const container = document.getElementById('tcomment');
		if (container) {
			container.innerHTML = `
				<div style="text-align: center; padding: 2rem; color: var(--content-text-color); border: 1px dashed var(--line-divider); border-radius: 12px; background: var(--card-bg);">
					<p style="margin-bottom: 0.5rem;">💬 ${message}</p>
					<button onclick="location.reload()" style="margin-top: 1rem; padding: 0.5rem 1rem; background: var(--primary); color: white; border: none; border-radius: 8px; cursor: pointer;">重新加载</button>
				</div>
			`;
		}
		window.twikooLoading = false;
	}

	// 页面加载完成后的处理
	function handlePageLoad() {
		// 如果不是懒加载模式，直接加载评论系统
		if (!twikooConfig.lazyLoad) {
			loadTwikooScript();
		}
	}

	// 页面加载完成后初始化
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', handlePageLoad);
	} else {
		handlePageLoad();
	}

	// 支持页面切换时重置状态
	const setupSwup = () => {
		window.swup?.hooks.on('page:view', () => {
			window.twikooLoaded = false;
			window.twikooLoading = false;
			// 重新处理页面加载
			setTimeout(handlePageLoad, 100);
		});
	};

	if (window?.swup?.hooks) {
		setupSwup();
	} else {
		document.addEventListener('swup:enable', setupSwup);
	}
</script>